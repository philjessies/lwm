2018-12-08 (pn) Done a bit of clean-up in here. I've also set up a bunch of
sections, generally from most to least important. At the top we have crashes,
and at the bottom clean-ups.

Right at the bottom of the file there's a cheat sheet of debugging tools.


=== CRASHES ===


=== FUNCTIONAL BREAKAGES ===

For multi-screen displays (xrandr), LWM thinks the total surface space of the
display is a rectangle. If you have a laptop connected to a larger external
monitor, this means there are inaccessible spaces that LWM thinks it can put
windows in.


=== THINGS THAT LOOK SILLY ===

Window repositioning after xrandr changes doesn't work well. This needs a lot of
testing and tweaking to get it working right.


=== ERROR LOGS ===

LWM produces error messages like these:
lwm: protocol request X_ConfigureWindow on resource 0x1200001 failed: BadMatch (invalid parameter attributes)
lwm: protocol request X_ConfigureWindow on resource 0x1800001 failed: BadMatch (invalid parameter attributes)
lwm: protocol request X_ConfigureWindow on resource 0x1a00001 failed: BadMatch (invalid parameter attributes)
lwm: protocol request X_ConfigureWindow on resource 0x1c00001 failed: BadMatch (invalid parameter attributes)


=== FEATURES ===

Detect when mouse pointer switches between displays (for multiple xrandr
monitors) and bring up some visual indication of where the pointer has gone.

Make the size of the mouse pointer configurable. Some people have poor vision,
and would benefit from a larger pointer (and 4k displays exacerbate this).


=== CLEANUPS ===

The way disp.cc keeps track of the mode is not very OO. Maybe this could be
refactored, so we don't have to have a global 'mode' variable.


=== DEBUGGING TOOLS ===

To get a dump of the window tree:
xwininfo -root -tree

To print details about a window:
xprop -id <id>

Test LWM changes in a VNC session (I use tightvnc). Believe me, testing LWM in
the same X session as you're using to edit its code is a seriously painful
experience.
vncserver -geometry 1600x1200 -name test
vncviewer localhost:1


DEBUG CLI
~~~~~~~~~
LWM can be run with the -debugcli command to have it listen for commands on
stdin. It doesn't have advanced editing functions, it's just a plain stdin
pipe which reads a line at a time. If you want editing functions, edit the lines
you want to paste in an editor.

It is recommended to redirect stderr into a file, and 'tail -f' it in a separate
terminal from the one in which the debug CLI is running. That way, your
interaction with the embedded debugger doesn't interfere with the debug logs,
and vice versa.

If -debugcli is specified with an argument, the argument is a sequence of
commands to run at start-up. This can be useful if you repeatedly want to set
auto-debug of new clients, or some other stuff.

For example, to print help on start-up, run:
./lwm -debugcli=help

To start up with xrandr faking on, and with an inaccessible area on the bottom-
right of the screen, and auto-debug of new clients, run:
./lwm -debugcli="xrandr 800x1200+0+0 800x500+800+0;dbg auto"

Available commands are:

help   - print out help.
ls     - lists the active clients.
dbg    - control over per-client debug messages (type 'dbg help' for details).
xrandr - test xrandr handling without fiddling with cables.

TODO: move the following xrandr help into the debug code.
TODO: refactor the debug handlers so there's a nice simple structure, and the
      help handling has a bit more structure.

xrandr (test xrandr handling without fiddling with cables)
~~~~~~
xrandr ?                         Print current visible areas.
xrandr                           Set visible area to be the full screen.
xrandr 100x200+0+0 100x50+100+0  Set visible areas.
